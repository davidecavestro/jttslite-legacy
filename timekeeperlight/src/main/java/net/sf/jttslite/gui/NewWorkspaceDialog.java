/*
 * NewWorkspaceDialog.java
 *
 * Created on Dec 7, 2009, 6:09:03 PM
 */
package net.sf.jttslite.gui;

import net.sf.jttslite.common.gui.dialog.DialogEvent;
import net.sf.jttslite.common.gui.dialog.DialogNotifier;
import net.sf.jttslite.common.gui.dialog.DialogNotifierImpl;
import net.sf.jttslite.ApplicationContext;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import net.sf.jttslite.prefs.PersistentComponent;

/**
 * Finestra di dialogo per la creazione di un nuovo workspace.
 *
 * @author davide
 */
public class NewWorkspaceDialog extends javax.swing.JDialog implements PersistentComponent, DialogNotifier/*, PropertyChangeListener*/ {

	private final DialogNotifierImpl _dialogNotifier;
	private final ApplicationContext _context;
	/*
	 * Indica se Ã¨ stato premuto OK
	 */
	private boolean confirmed = false;

	/** Creates new form NewWorkspaceDialog */
	public NewWorkspaceDialog (final ApplicationContext context, final Frame parent, boolean modal) {
		super (parent, modal);
		_context = context;
		initComponents ();
		this._dialogNotifier = new DialogNotifierImpl ();
		this.getRootPane ().setDefaultButton (okButton);

		cancelButton.getInputMap (JComponent.WHEN_IN_FOCUSED_WINDOW).put (KeyStroke.getKeyStroke ("ESCAPE"), "cancel");
		cancelButton.getActionMap ().put ("cancel", new javax.swing.AbstractAction ("cancel") {

			public void actionPerformed (ActionEvent ae) {
				close ();
			}
		});
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        cbOpenAutomatically = new javax.swing.JCheckBox();
        tfWorkspaceName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jPanel2, gridBagConstraints);

        okButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("net.sf.jttslite.gui.Bundle"); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(okButton, bundle.getString("NewWorkspaceDialog.okButton.text")); // NOI18N
        okButton.setMinimumSize(new java.awt.Dimension(80, 25));
        okButton.setPreferredSize(new java.awt.Dimension(80, 25));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 6);
        getContentPane().add(okButton, gridBagConstraints);

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, bundle.getString("NewWorkspaceDialog.cancelButton.text")); // NOI18N
        cancelButton.setMinimumSize(new java.awt.Dimension(80, 25));
        cancelButton.setPreferredSize(new java.awt.Dimension(80, 25));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 6);
        getContentPane().add(cancelButton, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        cbOpenAutomatically.setFont(cbOpenAutomatically.getFont().deriveFont((cbOpenAutomatically.getFont().getStyle() & ~java.awt.Font.ITALIC) & ~java.awt.Font.BOLD));
        cbOpenAutomatically.setText(org.openide.util.NbBundle.getMessage(NewWorkspaceDialog.class, "NewWorkspaceDialog.cbOpenAutomatically.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel1.add(cbOpenAutomatically, gridBagConstraints);

        tfWorkspaceName.setText(org.openide.util.NbBundle.getMessage(NewWorkspaceDialog.class, "NewWorkspaceDialog.tfWorkspaceName.text")); // NOI18N
        tfWorkspaceName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfWorkspaceNameMouseClicked(evt);
            }
        });
        tfWorkspaceName.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tfWorkspaceNamePropertyChange(evt);
            }
        });
        tfWorkspaceName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfWorkspaceNameKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 7, 6, 20);
        jPanel1.add(tfWorkspaceName, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
		confirm ();
}//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		close ();
}//GEN-LAST:event_cancelButtonActionPerformed

	private void tfWorkspaceNameKeyTyped (java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfWorkspaceNameKeyTyped
		nameChanged ();
	}//GEN-LAST:event_tfWorkspaceNameKeyTyped

	private void tfWorkspaceNameMouseClicked (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfWorkspaceNameMouseClicked
		nameChanged ();
	}//GEN-LAST:event_tfWorkspaceNameMouseClicked

	private void tfWorkspaceNamePropertyChange (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tfWorkspaceNamePropertyChange

	}//GEN-LAST:event_tfWorkspaceNamePropertyChange

	public String getPersistenceKey () {
		return "newworkspacedialog";
	}

	public void makePersistent () {
		_context.getPreferenceManager ().getGuiPreferences ().makeBoundsPersistent (getPersistenceKey (), this);
	}

   public boolean restorePersistent () {
	  return _context.getPreferenceManager ().getGuiPreferences ().
			  restoreAbsolutePersistentBounds (getPersistenceKey (), this);
   }

	public void addDialogListener (net.sf.jttslite.common.gui.dialog.DialogListener l) {
		_dialogNotifier.addDialogListener (l);
	}

	public void removeDialogListener (final net.sf.jttslite.common.gui.dialog.DialogListener l) {
		_dialogNotifier.removeDialogListener (l);
	}

	@Override
	public void setVisible (boolean b) {
		if (b) {
			/*
			 * mostra
			 * reinizializza lo stato
			 */
			initState ();
		} else {
			/*
			 * nascondi
			 * 
			 */
		}
		super.setVisible (b);
	}

//	public void propertyChange (final PropertyChangeEvent evt) {
//		throw new UnsupportedOperationException ("Not supported yet.");
//	}


	private void close () {
		setVisible (false);
	}

	/**
	 * Restituisce il nome del nuovo workspace.
	 * @return il nome del nuovo workspace.
	 */
	public String getWorkspaceName () {
		return tfWorkspaceName.getText ();
	}

	/**
	 * Restituisce <code>true</code> se il nuovo workspace deve essere automaticamentte
	 * caricato.
	 * @return <code>true</code> se il nuovo workspace deve essere automaticamentte
	 * caricato.
	 */
	public boolean isAutoOpen () {
		return cbOpenAutomatically.isSelected ();
	}

	private void confirm () {
		confirmed = true;
		_dialogNotifier.fireDialogPerformed (new DialogEvent (this, JOptionPane.OK_OPTION));
		setVisible (false);
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox cbOpenAutomatically;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField tfWorkspaceName;
    // End of variables declaration//GEN-END:variables

	/**
	 * Varia l'abilitazione del pulsante di conferma, attivandolo se il campo
	 * nome contiene un valore significativo (almeno  un carattere che non sia
	 * lo spazio).
	 */
	private void nameChanged () {
		final String wsName = tfWorkspaceName.getText ();
		okButton.setEnabled (wsName!=null && wsName.trim ().length ()>0);
	}

	private void initState () {
		tfWorkspaceName.setText (java.util.ResourceBundle.getBundle("net/sf/jttslite/gui/Bundle").getString("NewWorkspaceDialog.tfWorkspaceName.text"));
		confirmed=false;
//		cbOpenAutomatically.getModel ().setSelected (true);
		tfWorkspaceName.selectAll ();
	}

	/**
	 * Indica se Ã¨ stato premuto il pulsante di conferma.
	 * @return <code>true</code> se Ã¨ stato premuto il pulsante di conferma.
	 */
	public boolean isConfirmed () {
		return confirmed;
	}
}
