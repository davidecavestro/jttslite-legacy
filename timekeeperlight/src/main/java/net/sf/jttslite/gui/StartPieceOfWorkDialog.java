/*
 * StartPieceOfWorkDialog.java
 *
 * Created on 10 febbraio 2007, 19.20
 */

package net.sf.jttslite.gui;

import net.sf.jttslite.common.gui.dialog.DialogEvent;
import net.sf.jttslite.common.gui.dialog.DialogNotifier;
import net.sf.jttslite.common.gui.dialog.DialogNotifierImpl;
import net.sf.jttslite.ApplicationContext;
import net.sf.jttslite.core.model.Task;
import net.sf.jttslite.core.util.DurationImpl;
import java.awt.event.ActionEvent;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.text.DateFormatter;
import net.sf.jttslite.prefs.PersistentComponent;

/**
 * Dialog di lancio di un nuovo progress.
 *
 * @author  Davide Cavestro
 */
public class StartPieceOfWorkDialog extends javax.swing.JDialog implements PersistentComponent, DialogNotifier {
	
	private final DialogNotifierImpl _dialogNotifier;
	
	private final ApplicationContext _context;
	/**
	 * Costruttore.
	 */
	public StartPieceOfWorkDialog (final ApplicationContext context, java.awt.Frame parent, boolean modal){
		super (parent, modal);
		_context = context;
		initComponents ();
		this._dialogNotifier = new DialogNotifierImpl ();
		this.getRootPane ().setDefaultButton (okButton);
		
		cancelButton.getInputMap (JComponent.WHEN_IN_FOCUSED_WINDOW).put (KeyStroke.getKeyStroke ("ESCAPE"), "cancel");
		cancelButton.getActionMap().put("cancel", new javax.swing.AbstractAction ("cancel"){
			public void actionPerformed (ActionEvent ae){
				close();
			}
		});
		
//		pack ();
		startMethodChanged ();
		setLocationRelativeTo (null);
		
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel3 = new javax.swing.JLabel();
        descriptionPane = new javax.swing.JScrollPane();
        descriptionField = new javax.swing.JTextArea();
        fromField = new JFormattedTextField (new DateFormatter (new SimpleDateFormat (CustomizableFormat.LONG_DATE.getValue (_context))));
        durationField = new DurationTextField (new DurationImpl (0));
        fromRadio = new javax.swing.JRadioButton();
        durationRadio = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("net.sf.jttslite.gui.res"); // NOI18N
        setTitle(bundle.getString("New_progress")); // NOI18N
        setModal(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, "&Notes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        getContentPane().add(jLabel3, gridBagConstraints);

        descriptionField.setColumns(20);
        descriptionField.setRows(5);
        descriptionPane.setViewportView(descriptionField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        getContentPane().add(descriptionPane, gridBagConstraints);

        fromField.setText("jFormattedTextField1");
        fromField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromFieldActionPerformed(evt);
            }
        });
        fromField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fromFieldPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        getContentPane().add(fromField, gridBagConstraints);

        durationField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                durationFieldActionPerformed(evt);
            }
        });
        durationField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                durationFieldPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        getContentPane().add(durationField, gridBagConstraints);

        buttonGroup1.add(fromRadio);
        fromRadio.setFont(new java.awt.Font("Dialog", 0, 12));
        fromRadio.setText("From");
        fromRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        fromRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));
        fromRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromRadioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        getContentPane().add(fromRadio, gridBagConstraints);

        buttonGroup1.add(durationRadio);
        durationRadio.setFont(new java.awt.Font("Dialog", 0, 12));
        durationRadio.setSelected(true);
        durationRadio.setText("Duration");
        durationRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        durationRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));
        durationRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                durationRadioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        getContentPane().add(durationRadio, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        okButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(okButton, bundle.getString("Ok")); // NOI18N
        okButton.setPreferredSize(new java.awt.Dimension(80, 25));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        jPanel1.add(okButton, gridBagConstraints);

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 12));
        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, bundle.getString("Cancel")); // NOI18N
        cancelButton.setPreferredSize(new java.awt.Dimension(80, 25));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 7);
        jPanel1.add(cancelButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void durationRadioActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_durationRadioActionPerformed
		startMethodChanged ();
	}//GEN-LAST:event_durationRadioActionPerformed

	private void fromRadioActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromRadioActionPerformed
		startMethodChanged ();
	}//GEN-LAST:event_fromRadioActionPerformed

	private void durationFieldPropertyChange (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_durationFieldPropertyChange
	check ();
	}//GEN-LAST:event_durationFieldPropertyChange

	private void fromFieldPropertyChange (java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fromFieldPropertyChange
	check ();
	}//GEN-LAST:event_fromFieldPropertyChange

	private void durationFieldActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_durationFieldActionPerformed
	check ();
	}//GEN-LAST:event_durationFieldActionPerformed

	private void fromFieldActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromFieldActionPerformed
	check ();
	}//GEN-LAST:event_fromFieldActionPerformed

	private void cancelButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		close ();
	}//GEN-LAST:event_cancelButtonActionPerformed

	private void okButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
		confirm ();
	}//GEN-LAST:event_okButtonActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextArea descriptionField;
    private javax.swing.JScrollPane descriptionPane;
    private javax.swing.JFormattedTextField durationField;
    private javax.swing.JRadioButton durationRadio;
    private javax.swing.JFormattedTextField fromField;
    private javax.swing.JRadioButton fromRadio;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
	
	private void confirm (){
		this._dialogNotifier.fireDialogPerformed (new DialogEvent (this, JOptionPane.OK_OPTION));
		this.hide ();
	}
	
	private Task _task;
	public void showForTask (Task t) {
		this._task = t;
        setTitle("Start new action " + " - ["+t.getName ()+"]");
		show ();
	}
	
	public Task getTask (){
		return this._task;
	}
	
	public void show () {
		reset ();
		super.setVisible (true);
	}
	
	private void reset (){
		this.fromField.setValue (new Date ());
		this.descriptionField.setText ("");
		durationField.setValue (new DurationImpl (0));
		check ();
	}
	
	
	private void check (){
		final Date from = (Date)fromField.getValue ();
		okButton.setEnabled (_task!=null && from!=null);
	}
	
	public String getPersistenceKey () {
		return "startprogressdialog";
	}
	
	public void makePersistent () {
		_context.getPreferenceManager ().getGuiPreferences ().makeBoundsPersistent (getPersistenceKey (), this);
	}
	
   public boolean restorePersistent () {
	  return _context.getPreferenceManager ().getGuiPreferences ().
			  restoreAbsolutePersistentBounds (getPersistenceKey (), this);
   }
	
	public Date getFromDate (){
		if (_useDuration) {
			return new Date (new Date ().getTime () - ((DurationImpl)durationField.getValue ()).getTime ());
		} else {
			return (Date)fromField.getValue ();
		}
	}
	
	public String getDescriptionText (){
		return this.descriptionField.getText ();
	}
	
	public void addDialogListener (net.sf.jttslite.common.gui.dialog.DialogListener l) {
		this._dialogNotifier.addDialogListener (l);
	}	
	
	public void removeDialogListener (net.sf.jttslite.common.gui.dialog.DialogListener l) {
		this._dialogNotifier.removeDialogListener (l);
	}
	
	private void close (){
		hide ();
	}
	
	boolean _useDuration;
	private void startMethodChanged () {
		_useDuration = durationRadio.isSelected ();
		durationField.setEnabled (_useDuration);
		fromField.setEnabled (!_useDuration);
		if (_useDuration) {
			durationField.requestFocusInWindow ();
			durationField.selectAll ();
		} else {
			fromField.requestFocusInWindow ();
			fromField.selectAll ();
		}
	}	
		
}
